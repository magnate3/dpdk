/* SPDX-License-Identifier: BSD-3-Clause
 * Copyright(c) 2010-2014 Intel Corporation
 */

#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <errno.h>
#include <sys/queue.h>

#include <rte_memory.h>
#include <rte_launch.h>
#include <rte_eal.h>
#include <rte_per_lcore.h>
#include <rte_lcore.h>
#include <rte_debug.h>
//#include <rte_memzone.h>
//#include <rte_malloc.h>
#include <unistd.h>
//#include "eal_private.h"
static int
lcore_hello(__attribute__((unused)) void *arg)
{
	unsigned lcore_id,  socket_id;
	lcore_id = rte_lcore_id();
        socket_id = rte_socket_id();
	printf("hello from core %u\n", lcore_id);
	printf("socket id  %u\n", socket_id);
        sleep(60); 
	return 0;
}
struct node {
  int a;
  int b;
};

int
main(int argc, char **argv)
{
        int num = 0;
        if (argc > 1)
        {
           num = atoi(argv[1]); 
        }
        printf("socket id %d \n ", num);
        int *arr;
        int ret;
        struct node *nodes;
        ret = rte_eal_init(argc, argv);
        if (ret < 0)
                rte_panic("Cannot init EAL\n");
        arr = rte_malloc("arr", sizeof(int) * 1024, 0);
        if (arr == NULL)
		rte_exit(EXIT_FAILURE, "Cannot malloc memory \n");
        printf("arr addr %llx \n ",(long long) arr);
        arr[0] = 1000;
        rte_free(arr);
         /*
        nodes = rte_malloc_socket(NULL, sizeof(struct node) * 2, 0, num);
        nodes = rte_malloc(NULL, sizeof(*nodes), 0);
        if (NULL == nodes)
		rte_exit(EXIT_FAILURE, "Cannot malloc memory \n");
        printf("nodes addr %llx \n ",(long long) nodes);
        FILE * fp = fopen ("rte_malloc.txt", "w+");
        rte_malloc_dump_heaps(fp);
        fclose(fp);
        nodes[0].a = 18 ;
        nodes[0].b = 24 ;
        printf("start to   free \n");
        rte_free(nodes);
        */
        getchar();
	return 0;
}
